#!/bin/bash

# Script pour cr√©er toutes les issues GitHub automatiquement
# Usage: ./create_issues_v2.sh OWNER REPO

if [ $# -ne 2 ]; then
    echo "Usage: $0 <OWNER> <REPO>"
    echo "Example: $0 myusername myrepo"
    exit 1
fi

# Charger les variables d'environnement depuis .env
if [ -f .env ]; then
    export $(cat .env | grep -v '^#' | xargs)
else
    echo "‚ùå Fichier .env non trouv√©."
    exit 1
fi

if [ -z "$GITHUB_TOKEN" ]; then
    echo "‚ùå GITHUB_TOKEN non d√©fini dans le fichier .env"
    exit 1
fi

OWNER=$1
REPO=$2
API_URL="https://api.github.com/repos/${OWNER}/${REPO}/issues"

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Fonction pour cr√©er une issue en utilisant un fichier JSON temporaire
create_issue_with_file() {
    local title="$1"
    local body="$2"
    local labels="$3"
    
    echo -e "${YELLOW}Cr√©ation: $title${NC}"
    
    # Cr√©er un fichier JSON temporaire
    cat > issue_temp.json << EOF
{
  "title": "$title",
  "body": "$body",
  "labels": [$labels]
}
EOF
    
    # Appel API
    response=$(curl -s -w "%{http_code}" -X POST \
        -H "Authorization: token $GITHUB_TOKEN" \
        -H "Accept: application/vnd.github.v3+json" \
        -H "Content-Type: application/json" \
        -d @issue_temp.json \
        "$API_URL")
    
    http_code="${response: -3}"
    response_body="${response%???}"
    
    if [ "$http_code" -eq 201 ]; then
        issue_number=$(echo "$response_body" | grep -o '"number": [0-9]*' | cut -d' ' -f2)
        echo -e "${GREEN}‚úì Issue #$issue_number cr√©√©e${NC}"
    else
        echo -e "${RED}‚úó Erreur (HTTP $http_code)${NC}"
        echo "$response_body"
    fi
    
    # Nettoyer le fichier temporaire
    rm -f issue_temp.json
    sleep 1
}

echo "=== Cr√©ation des issues GitHub pour OneFlow ==="
echo

# üèóÔ∏è Configuration & Infrastructure
create_issue_with_file "[SETUP-001] Configuration initiale du projet" \
"## Description
- Initialiser Next.js 14 avec TypeScript
- Configuration Tailwind CSS  
- Structure des dossiers (components, pages, lib, types)
- Configuration ESLint + Prettier
- Setup des variables d'environnement

## Crit√®res d'acceptation
- [ ] Next.js 14 install√© et configur√©
- [ ] TypeScript configur√©
- [ ] Tailwind CSS op√©rationnel
- [ ] Structure de dossiers coh√©rente
- [ ] Linting et formatting automatiques" \
'"setup", "priority:high"'

create_issue_with_file "[SETUP-002] Configuration base de donn√©es" \
"## Description  
- Configuration PostgreSQL
- Schema initial (users, projects, tasks, time_entries)
- Configuration Prisma ORM
- Migrations initiales
- Seed data pour d√©veloppement

## Crit√®res d'acceptation
- [ ] PostgreSQL configur√©
- [ ] Schema complet d√©fini
- [ ] Prisma configur√© et fonctionnel
- [ ] Migrations appliqu√©es
- [ ] Donn√©es de test disponibles" \
'"setup", "database", "priority:high"'

create_issue_with_file "[SETUP-003] Syst√®me d'authentification" \
"## Description
- Configuration NextAuth.js
- Strat√©gies de connexion (email/password, Google, GitHub)
- Middleware de protection des routes
- Gestion des r√¥les (admin, chef de projet, d√©veloppeur)

## Crit√®res d'acceptation
- [ ] NextAuth.js configur√©
- [ ] Connexion email/password fonctionnelle
- [ ] OAuth Google/GitHub configur√©s
- [ ] Routes prot√©g√©es
- [ ] Syst√®me de r√¥les op√©rationnel" \
'"auth", "security", "priority:high"'

create_issue_with_file "[PROJECT-001] CRUD Projets" \
"## Description
- Cr√©ation/√©dition/suppression de projets
- Interface liste des projets avec filtres
- Assignation d'√©quipes aux projets
- Gestion des statuts projet (draft, active, completed, archived)

## Crit√®res d'acceptation
- [ ] CRUD complet des projets
- [ ] Interface liste avec filtres
- [ ] Assignation d'√©quipes
- [ ] Gestion des statuts" \
'"feature", "project-management", "priority:high"'

create_issue_with_file "[PROJECT-002] CRUD T√¢ches avec liens" \
"## Description
- Cr√©ation/√©dition/suppression de t√¢ches
- Syst√®me de d√©pendances entre t√¢ches (bloquant/bloqu√© par)
- Types de t√¢ches (feature, bug, task, epic)
- Priorit√©s et estimations
- Assignation utilisateurs

## Crit√®res d'acceptation
- [ ] CRUD complet des t√¢ches
- [ ] Syst√®me de d√©pendances
- [ ] Types et priorit√©s
- [ ] Estimations temps
- [ ] Assignation utilisateurs" \
'"feature", "task-management", "priority:high"'

echo -e "${GREEN}‚úÖ Repository cr√©√©: https://github.com/$OWNER/$REPO${NC}"
echo "Issues cr√©√©es avec succ√®s !"